x-indexer-environment: &index-common
  POSTGRES_HOST: 172.28.1.100
  POSTGRES_PORT: 5432
  POSTGRES_DB: ${POSTGRES_DB:-ton_index}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PostgreSQL1234}
  POSTGRES_PUBLISH_PORT: ${POSTGRES_PUBLISH_PORT:-5432}

services:
  genesis:
    container_name: genesis
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    restart: unless-stopped
    ports:
      - 40004:40004       # lite-server
      - "40003:40003/udp" # dht-server
      - 40002:40002       # validator-console
      - "40001:40001/udp" # validator public port
      - 8888:8888         # for embedded http-file-server
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val0:/var/ton-work/db # docker persistent storage for ton db
    environment:
      - GENESIS=true
      - NAME=genesis
      - NEXT_BLOCK_GENERATION_DELAY # default 2 seconds, adjust health-check interval
      - EXTERNAL_IP # used to generate  external.global.config.json that allows remote users to connect to lite-server via public IP
      - VALIDATION_PERIOD # 24h, default 20min
      - MASTERCHAIN_ONLY   # default false
      - VERBOSITY=${GENESIS_VERBOSITY:-3}
      - EMBEDDED_FILE_HTTP_SERVER # enable file-http-server, default false
      - EMBEDDED_FILE_HTTP_SERVER_PORT # default port 8888
      - CUSTOM_PARAMETERS
      - CUSTOM_CONFIG_SMC_URL
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL}
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '${GENESIS_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.10

  # MyLocalTon optional services
  blockchain-explorer:
    container_name: blockchain-explorer
    profiles: [blockchain-explorer]
    image: ghcr.io/neodix42/mylocalton-docker-explorer:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./explorer/Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    restart: unless-stopped
    environment:
      - SERVER_PORT=8080
      - FILE_SERVER_IP=172.28.1.24
      - FILE_SERVER_PORT=8000
    ports:
      - 8080:8080
    healthcheck:
      test: curl -sS http://127.0.0.1:8080/last || echo 1
      interval: 15s
      timeout: 10s
      retries: 3
    volumes:
      - shared-data:/usr/share/data
    depends_on:
      genesis:
        condition: service_healthy
    networks:
      main:
        ipv4_address: 172.28.1.20

  lite-server:
    container_name: lite-server
    profiles: [lite-server]
    image: ghcr.io/neodix42/mylocalton-lite-server:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./lite-server/Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    restart: unless-stopped
    environment:
      - LITE_SERVER_PORT=30004
      - CONSOLE_PORT=30002
      - PUBLIC_PORT=30001
    ports:
      - 30004:30004
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:30004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: 15s
      timeout: 10s
      retries: 3
    volumes:
      - shared-data:/usr/share/data
    depends_on:
      genesis:
        condition: service_healthy
    networks:
      main:
        ipv4_address: 172.28.1.30

  faucet:
    container_name: faucet
    profiles: [faucet]
    image: ghcr.io/neodix42/mylocalton-docker-faucet:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./faucet/Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    ports:
      - 88:88
    volumes:
      - shared-data:/usr/share/data
    restart: unless-stopped
    depends_on:
      genesis:
        condition: service_healthy
    environment:
      - SERVER_PORT=88
      - FAUCET_USE_RECAPTCHA # default true
      - RECAPTCHA_SITE_KEY # google reCaptcha v2
      - RECAPTCHA_SECRET   # google reCaptcha v2
      - MASTERCHAIN_ONLY=${FAUCET_MASTERCHAIN_ONLY:-false}   # default false, if true generates new addresses only in masterchain (-1)
      - FAUCET_REQUEST_EXPIRATION_PERIOD #  default 86400 seconds (24h)
      - FAUCET_SINGLE_GIVEAWAY    # default 10 toncoins
    healthcheck:
      test: curl -sS http://127.0.0.1:88|| echo 1
    networks:
      main:
        ipv4_address: 172.28.1.21

  data:
    container_name: data-generator
    profiles: [data]
    image: ghcr.io/neodix42/mylocalton-docker-data:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./data/Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    ports:
      - 99:99
    volumes:
      - shared-data:/usr/share/data
    restart: unless-stopped
    depends_on:
      genesis:
        condition: service_healthy
    environment:
      - SERVER_PORT=99
      - PERIOD=5
    healthcheck:
      test: curl -sS http://127.0.0.1:99|| echo 1
    networks:
      main:
        ipv4_address: 172.28.1.22

  time-machine:
    container_name: time-machine
    profiles: [time-machine]
    image: ghcr.io/neodix42/mylocalton-docker-time-machine:${TON_BRANCH:-latest}
    build:
      context: .
      dockerfile: ./time-machine/Dockerfile
      args:
        TON_BRANCH: ${TON_BRANCH:-latest}
    ports:
      - 8083:8083
    volumes:
      - shared-data:/usr/share/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    depends_on:
      genesis:
        condition: service_healthy
    environment:
      - SERVER_PORT=8083
    healthcheck:
      test: curl -sS http://127.0.0.1:8083 || echo 1
    networks:
      main:
        ipv4_address: 172.28.1.23

  file-server:
    container_name: file-server
    image: python:bullseye
    ports:
      - 8000:8000
    volumes:
      - shared-data:/usr/share/data
    entrypoint:
      python3 -m http.server 8000 -d /usr/share/data
    restart: unless-stopped
    environment:
      - SERVER_PORT=8000
    healthcheck:
      test: curl -sS http://127.0.0.1:8000|| echo 1
    networks:
      main:
        ipv4_address: 172.28.1.24

  restarter:
    container_name: explorer-restarter
    profiles: [blockchain-explorer]
    image: docker:cli
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: [ "/bin/sh", "-c", "while true; do sleep 3600; echo restarted; docker restart blockchain-explorer; done" ]
    depends_on:
      blockchain-explorer:
        condition: service_healthy
    networks:
      main:
        ipv4_address: 172.28.1.25


  # ADDITIONAL SERVICES

  ## VALIDATORS
  validator-1:
    container_name: validator-1
    profiles: [validators-1, validators-2, validators-3, validators-4, validators-5]
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    restart: unless-stopped
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val1:/var/ton-work/db
    environment:
      - NAME=validator-1
      - GENESIS_IP=172.28.1.10
      - VERBOSITY=${VALIDATOR_VERBOSITY:-1}
      - CUSTOM_PARAMETERS
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: 10s
      retries: 10
    depends_on:
      - genesis
    deploy:
      resources:
        limits:
          cpus: '${VALIDATOR_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.11

  validator-2:
    container_name: validator-2
    profiles: [validators-2, validators-3, validators-4, validators-5]
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    restart: unless-stopped
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val2:/var/ton-work/db
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: 10s
      retries: 10
    environment:
      - NAME=validator-2
      - GENESIS_IP=172.28.1.10
      - VERBOSITY=${VALIDATOR_VERBOSITY:-1}
      - CUSTOM_PARAMETERS
    depends_on:
      - genesis
    deploy:
      resources:
        limits:
          cpus: '${VALIDATOR_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.12

  validator-3:
    container_name: validator-3
    profiles: [validators-3, validators-4, validators-5]
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    restart: unless-stopped
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val3:/var/ton-work/db
    environment:
      - NAME=validator-3
      - GENESIS_IP=172.28.1.10
      - VERBOSITY=${VALIDATOR_VERBOSITY:-1}
      - CUSTOM_PARAMETERS
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: 10s
      retries: 10
    depends_on:
      - genesis
    deploy:
      resources:
        limits:
          cpus: '${VALIDATOR_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.13

  validator-4:
    container_name: validator-4
    profiles: [validators-4, validators-5]
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    restart: unless-stopped
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val4:/var/ton-work/db
    environment:
      - NAME=validator-4
      - GENESIS_IP=172.28.1.10
      - VERBOSITY=${VALIDATOR_VERBOSITY:-1}
      - CUSTOM_PARAMETERS
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: 10s
      retries: 10
    depends_on:
      - genesis
    deploy:
      resources:
        limits:
          cpus: '${VALIDATOR_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.14

  validator-5:
    container_name: validator-5
    profiles: [validators-5]
    image: ghcr.io/neodix42/mylocalton-docker:${TON_BRANCH:-latest}
    restart: unless-stopped
    volumes:
      - shared-data:/usr/share/data
      - ton-db-val5:/var/ton-work/db
    environment:
      - NAME=validator-5
      - GENESIS_IP=172.28.1.10
      - VERBOSITY=${VALIDATOR_VERBOSITY:-1}
      - CUSTOM_PARAMETERS
    healthcheck:
      test: /usr/local/bin/lite-client -a 127.0.0.1:40004 -p /var/ton-work/db/liteserver.pub -t 3 -c last
      interval: ${HEALTHCHECK_INTERVAL:-15s}
      timeout: 10s
      retries: 10
    depends_on:
      - genesis
    deploy:
      resources:
        limits:
          cpus: '${VALIDATOR_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.15

  ## TON HTTP API V2
  tonhttpapi:
    container_name: ton-http-api-v2
    image: toncenter/ton-http-api:v2.0.59
    ports:
      - 8082:8082
    volumes:
      - shared-data:/usr/share/data
    environment:
      - TON_API_TONLIB_LITESERVER_CONFIG=/usr/share/data/global.config.json
      - TON_API_GET_METHODS_ENABLED=1
      - TON_API_JSON_RPC_ENABLED=1
      - TON_API_TONLIB_KEYSTORE=/tmp/keystore/
      - TON_API_TONLIB_CDLL_PATH=
      - TON_API_LOGS_JSONIFY
      - TON_API_LOGS_LEVEL
      - TON_API_ROOT_PATH
    restart: unless-stopped
    depends_on:
      genesis:
        condition: service_healthy
    command: -c "gunicorn -k uvicorn.workers.UvicornWorker -w ${TON_API_WORKERS:-1} --bind 0.0.0.0:8082 pyTON.main:app"
    healthcheck:
      test: curl -sS http://127.0.0.1:8082${TON_API_ROOT_PATH}/healthcheck || echo 1
      interval: 30s
      timeout: 5s
      retries: 10
    networks:
      main:
        ipv4_address: 172.28.1.105

  ## TonCenter Indexer (v3)
  event-cache:
    container_name: index-event-cache
    profiles: [indexer]
    image: redis:latest
    command: redis-server --maxclients 40000
    volumes:
      - event_cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      main:
        ipv4_address: 172.28.1.104

  event-classifier:
    container_name: index-event-classifier
    profiles: [indexer]
    image: toncenter/ton-indexer-classifier:v1.2.1
    depends_on:
      postgres:
        condition: service_healthy
      event-cache:
        condition: service_healthy
    command: --pool-size ${TON_CLASSIFIER_WORKERS:-2} --prefetch-size 10 --batch-size 100 --expected-total 128000
    environment:
      <<: *index-common
      TON_INDEXER_API_ROOT_PATH:
      TON_INDEXER_IS_TESTNET:
      TON_INDEXER_REDIS_DSN: redis://172.28.1.104:6379
    deploy:
      resources:
        limits:
          cpus: '${CLASSIFIER_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.103

  index-api:
    container_name: index-api
    profiles: [indexer, indexer-minimal]
    image: toncenter/ton-indexer-api:v1.2.1
    depends_on:
      - index-worker
    command: -prefork -threads ${TON_INDEXER_WORKERS:-2}
    ports:
      - target: 8081
        published: 8081
    environment:
      <<: *index-common
      TON_INDEXER_TON_HTTP_API_ENDPOINT: http://172.28.1.102:8081/
    restart: always
    networks:
      main:
        ipv4_address: 172.28.1.102

  run-migrations:
    container_name: run-migrations
    profiles: [indexer, indexer-minimal]
    image: toncenter/ton-indexer-worker:v1.2.1
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      <<: *index-common
      TON_WORKER_BINARY: ton-index-postgres-migrate
    networks:
      main:
    command: --pg postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@172.28.1.100:5432/${POSTGRES_DB}
    restart: on-failure

  index-worker:
    container_name: index-worker
    profiles: [indexer, indexer-minimal]
    image: toncenter/ton-indexer-worker:v1.2.1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ton-db-val0:/tondb
      - ton_index_workdir:/ton_index_workdir
    environment:
      <<: *index-common
      TON_WORKER_BINARY: ton-index-postgres
    command: --pg postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@172.28.1.100:5432/${POSTGRES_DB} --db /tondb --working-dir /ton_index_workdir --from ${TON_WORKER_FROM:-1}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${INDEXER_CPU_QUOTE:-1.0}'
    networks:
      main:
        ipv4_address: 172.28.1.101

  postgres:
    container_name: index-postgres
    profiles: [indexer, indexer-minimal]
    image: postgres:17
    environment: *index-common
    ports:
      - ${POSTGRES_PUBLISH_PORT:-5432}:5432
    command: postgres -c max_connections=1024 -c shared_buffers=2GB -c work_mem=64MB -c max_wal_size=1GB -c tcp_keepalives_idle=60 -c tcp_keepalives_interval=60 -c tcp_keepalives_count=60
    depends_on:
      genesis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ton_index -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    shm_size: 2G
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    logging:
      driver: local
      options:
        max-size: 4G
    networks:
      main:
        ipv4_address: 172.28.1.100

volumes:
  shared-data:
  postgres_data:
  ton_index_workdir:
  event_cache:
  ton-db-val0:
  ton-db-val1:
  ton-db-val2:
  ton-db-val3:
  ton-db-val4:
  ton-db-val5:
# # uncomment if you want to mount this image in folder
# driver: local
# driver_opts:
#   o: bind
#   type: none
#   device: /home/user/ton-db-val0

networks:
  main:
    name: mylocalton-network
    ipam:
      driver: default
      config:
        - subnet: 172.28.1.0/24
